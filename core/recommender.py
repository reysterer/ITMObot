def recommend_courses(query: str, programs: dict) -> str | None:
    q = query.lower()

    tag_map = {
        "nlp": ["nlp", "—è–∑—ã–∫", "—Ç–µ–∫—Å—Ç", "linguistics"],
        "cv": ["cv", "computer vision", "–∑—Ä–µ–Ω–∏–µ", "image", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω"],
        "product": ["product", "–ø—Ä–æ–¥—É–∫—Ç", "–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç", "—É–ø—Ä–∞–≤–ª–µ–Ω"],
        "ml": ["ml", "–º–∞—à–∏–Ω", "machine learning", "–æ–±—É—á–µ–Ω–∏–µ"],
        "dl": ["deep", "–≥–ª—É–±–æ–∫"]
    }

    tags = [tag for tag, kws in tag_map.items() if any(w in q for w in kws)]
    if not tags:
        return None

    matches = []
    for prog_name, prog in programs.items():
        for sem in prog["semesters"]:
            for course in sem.get("electives", []):
                course_low = course.lower()
                if any(tag in course_low for tag in tags):
                    matches.append(f"{course} ({prog_name}, —Å–µ–º–µ—Å—Ç—Ä {sem['num']})")

    if not matches:
        return "–ù–µ –Ω–∞—à—ë–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —ç–ª–µ–∫—Ç–∏–≤–æ–≤ –ø–æ —Ç–≤–æ–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º üòî"

    top = "\n- ".join(matches[:7])
    tags_str = ", ".join(tags)
    return f"üìó –ü–æ–¥–æ–±—Ä–∞–ª —ç–ª–µ–∫—Ç–∏–≤—ã –ø–æ —Ç–≤–æ–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º ({tags_str}):\n- {top}"