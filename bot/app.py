import os
import asyncio
import json
from pathlib import Path

from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command

from core.loader import load_programs
from core.faq import answer_faq
from core.recommender import recommend_courses
from core.relevancy import is_relevant

#–¥–∞–Ω–Ω—ã–µ –∏ –±–∞–∑–æ–≤—ã–µ —à—Ç—É–∫–∏
programs = load_programs("data")          # —á–∏—Ç–∞–µ—Ç ai.json –∏ ai_product.json
router = Router()
FAV_PATH = Path("data/favorites.json")    # user_id -> [courses]


#—É—Ç–∏–ª–∏—Ç—ã
def _get_all_courses(programs_dict: dict):
    """–°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –∫—É—Ä—Å—ã –≤–æ –≤—Å–µ—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏."""
    items = []  # (course, program, semester, type)
    for prog_name, prog in programs_dict.items():
        for sem in prog.get("semesters", []):
            for c in sem.get("mandatory", []):
                items.append((c, prog_name, sem["num"], "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π"))
            for c in sem.get("electives", []):
                items.append((c, prog_name, sem["num"], "—ç–ª–µ–∫—Ç–∏–≤"))
    return items


def _load_favs() -> dict:
    if FAV_PATH.exists():
        try:
            return json.loads(FAV_PATH.read_text(encoding="utf-8"))
        except Exception:
            return {}
    return {}


def _save_favs(data: dict):
    FAV_PATH.parent.mkdir(exist_ok=True)
    FAV_PATH.write_text(json.dumps(data, ensure_ascii=False, indent=2), encoding="utf-8")


#–∫–æ–º–∞–Ω–¥—ã
@router.message(Command("start", "help"))
async def welcome(msg: types.Message):
    await msg.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞–º–∏ –ò–¢–ú–û: AI –∏ AI Product.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ AI —Å–µ–º–µ—Å—Ç—Ä 1\n"
        "‚Ä¢ —ç–ª–µ–∫—Ç–∏–≤—ã AI Product —Å–µ–º–µ—Å—Ç—Ä 2\n"
        "‚Ä¢ —Ä–∞–∑–Ω–∏—Ü–∞ –ø—Ä–æ–≥—Ä–∞–º–º\n"
        "‚Ä¢ /programs ‚Äî —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º\n"
        "‚Ä¢ /search nlp ‚Äî –ø–æ–∏—Å–∫ –∫—É—Ä—Å–∞\n"
        "‚Ä¢ /interests nlp, cv ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
        "‚Ä¢ /favorites ‚Äî –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"
    )


@router.message(Command("programs"))
async def cmd_programs(msg: types.Message):
    names = ", ".join(programs.keys())
    await msg.answer(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {names}\n\n"
                     "–ü—Ä–∏–º–µ—Ä: /semester 2 AI   –∏–ª–∏   /semester 1 \"AI Product\"")


@router.message(Command("semester"))
async def cmd_semester(msg: types.Message):
    # /semester <–Ω–æ–º–µ—Ä> <AI|AI Product>
    parts = msg.text.split(maxsplit=2)
    if len(parts) < 3 or not parts[1].isdigit():
        await msg.answer('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /semester <–Ω–æ–º–µ—Ä> <AI|AI Product>\n'
                         '–ù–∞–ø—Ä.: /semester 1 AI   –∏–ª–∏   /semester 2 "AI Product"')
        return

    sem_num = int(parts[1])
    prog_name = parts[2].strip().strip('"')

    prog = programs.get(prog_name)
    if not prog:
        await msg.answer("–ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É. –ò—Å–ø–æ–ª—å–∑—É–π: /programs")
        return

    sem = next((s for s in prog["semesters"] if s["num"] == sem_num), None)
    if not sem:
        await msg.answer(f"–î–ª—è {prog_name} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Å–µ–º–µ—Å—Ç—Ä—É {sem_num}.")
        return

    mand = sem.get("mandatory", [])
    elect = sem.get("electives", [])

    text = [f"üìö {prog_name}: —Å–µ–º–µ—Å—Ç—Ä {sem_num}"]
    text.append("üìò –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ:\n- " + "\n- ".join(mand) if mand else "üìò –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–µ—Ç.")
    text.append("üìó –≠–ª–µ–∫—Ç–∏–≤—ã:\n- " + "\n- ".join(elect) if elect else "üìó –≠–ª–µ–∫—Ç–∏–≤–æ–≤ –Ω–µ—Ç.")
    await msg.answer("\n\n".join(text))


@router.message(Command("search"))
async def cmd_search(msg: types.Message):
    parts = msg.text.split(maxsplit=1)
    if len(parts) < 2:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search <—Ñ—Ä–∞–≥–º–µ–Ω—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∫—É—Ä—Å–∞>")
        return
    query = parts[1].lower()

    items = _get_all_courses(programs)
    hits = [(c, p, s, t) for (c, p, s, t) in items if query in c.lower()]
    if not hits:
        await msg.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ /programs.")
        return

    lines = [f"‚Ä¢ {c} ({p}, —Å–µ–º–µ—Å—Ç—Ä {s}, {t})" for (c, p, s, t) in hits[:15]]
    more = f"\n‚Ä¶ –∏ –µ—â—ë {len(hits)-15}" if len(hits) > 15 else ""
    await msg.answer("–ù–∞–π–¥–µ–Ω–æ:\n" + "\n".join(lines) + more)


@router.message(Command("interests"))
async def cmd_interests(msg: types.Message):
    parts = msg.text.split(maxsplit=1)
    if len(parts) < 2:
        await msg.answer('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /interests <–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞>\n'
                         '–ù–∞–ø—Ä.: /interests nlp, cv')
        return
    ans = recommend_courses(parts[1], programs)
    await msg.answer(ans or "–ü–æ–∫–∞ –Ω–µ –Ω–∞—à—ë–ª –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫—É—Ä—Å–æ–≤.")


@router.message(Command("favorites"))
async def cmd_favorites(msg: types.Message):
    favs = _load_favs()
    my = favs.get(str(msg.from_user.id), [])
    if not my:
        await msg.answer("–í –∏–∑–±—Ä–∞–Ω–Ω–æ–º –ø—É—Å—Ç–æ. –î–æ–±–∞–≤–ª—è–π —Ç–∞–∫: /fav_add <–ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞>")
        return
    await msg.answer("‚≠ê –¢–≤–æ—ë –∏–∑–±—Ä–∞–Ω–Ω–æ–µ:\n- " + "\n- ".join(my))


@router.message(Command("fav_add"))
async def cmd_fav_add(msg: types.Message):
    parts = msg.text.split(maxsplit=1)
    if len(parts) < 2:
        await msg.answer("–£–∫–∞–∂–∏ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n–ù–∞–ø—Ä.: /fav_add –í–≤–µ–¥–µ–Ω–∏–µ –≤ NLP")
        return
    course = parts[1].strip()

    items = _get_all_courses(programs)
    all_names = {c for (c, _, _, _) in items}
    if course not in all_names:
        await msg.answer("–¢–∞–∫–æ–≥–æ –∫—É—Ä—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ.")
        return

    favs = _load_favs()
    uid = str(msg.from_user.id)
    favs.setdefault(uid, [])
    if course not in favs[uid]:
        favs[uid].append(course)
        _save_favs(favs)
        await msg.answer(f"–î–æ–±–∞–≤–∏–ª –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: ¬´{course}¬ª.")
    else:
        await msg.answer("–≠—Ç–æ—Ç –∫—É—Ä—Å —É–∂–µ –µ—Å—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º.")


@router.message(Command("fav_clear"))
async def cmd_fav_clear(msg: types.Message):
    favs = _load_favs()
    uid = str(msg.from_user.id)
    if uid in favs and favs[uid]:
        favs[uid] = []
        _save_favs(favs)
        await msg.answer("–ò–∑–±—Ä–∞–Ω–Ω–æ–µ –æ—á–∏—â–µ–Ω–æ.")
    else:
        await msg.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.")


#–æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
@router.message()
async def handle_free_text(msg: types.Message):
    text = (msg.text or "").lower().strip()

    if not is_relevant(text):
        await msg.answer("–Ø –æ—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ –ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º–º—ã AI –∏ AI Product üôÇ")
        return

    faq_answer = answer_faq(text, programs)
    if faq_answer:
        await msg.answer(faq_answer)
        return

    rec_answer = recommend_courses(text, programs)
    if rec_answer:
        await msg.answer(rec_answer)
        return

    # —Ä–∞–∑–±–æ—Ä –∑–∞–ø—Ä–æ—Å–∞ –≤–∏–¥–∞: "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ/—ç–ª–µ–∫—Ç–∏–≤—ã AI —Å–µ–º–µ—Å—Ç—Ä 2"
    if "ai product" in text:
        prog_name = "AI Product"
    elif "ai" in text:
        prog_name = "AI"
    else:
        await msg.answer("–£—Ç–æ—á–Ω–∏, —Ä–µ—á—å –∏–¥—ë—Ç –ø—Ä–æ AI –∏–ª–∏ AI Product?")
        return

    sem_num = None
    for token in text.split():
        if token.isdigit():
            sem_num = int(token)
            break
    if not sem_num:
        await msg.answer("–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä —Å–µ–º–µ—Å—Ç—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ AI —Å–µ–º–µ—Å—Ç—Ä 2¬ª).")
        return

    prog = programs.get(prog_name)
    if not prog:
        await msg.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ.")
        return

    sem = next((s for s in prog["semesters"] if s["num"] == sem_num), None)
    if not sem:
        await msg.answer(f"–í {prog_name} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ {sem_num} —Å–µ–º–µ—Å—Ç—Ä—É.")
        return

    if "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω" in text:
        courses = sem.get("mandatory", [])
        if not courses:
            await msg.answer(f"–í {prog_name}, —Å–µ–º–µ—Å—Ç—Ä {sem_num} –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω –Ω–µ—Ç.")
        else:
            await msg.answer(
                f"üìò –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã {prog_name}, —Å–µ–º–µ—Å—Ç—Ä {sem_num}:\n- " +
                "\n- ".join(courses)
            )
    elif "—ç–ª–µ–∫—Ç–∏–≤" in text or "–≤—ã–±–æ—Ä" in text:
        courses = sem.get("electives", [])
        if not courses:
            await msg.answer(f"–í {prog_name}, —Å–µ–º–µ—Å—Ç—Ä {sem_num} —ç–ª–µ–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω –Ω–µ—Ç.")
        else:
            await msg.answer(
                f"üìó –≠–ª–µ–∫—Ç–∏–≤–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã {prog_name}, —Å–µ–º–µ—Å—Ç—Ä {sem_num}:\n- " +
                "\n- ".join(courses)
            )
    else:
        await msg.answer("–£—Ç–æ—á–Ω–∏: ¬´–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ¬ª –∏–ª–∏ ¬´—ç–ª–µ–∫—Ç–∏–≤—ã¬ª.")


#–∑–∞–ø—É—Å–∫
async def main():
    token = os.getenv("TG_TOKEN")
    if not token:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω TG_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    bot = Bot(token=token)
    dp = Dispatcher()
    dp.include_router(router)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
